--Creacion de usuario
CREATE USER tienda_mascotas1 IDENTIFIED BY tienda1234;
CREATE TABLESPACE tienda_mascotas
DATAFILE 'C:\BD\19C\ORADATA\ORCL\TIENDA_MASCOTAS_TBS.DBF' SIZE 100M;

--CREACION USUARIO
CREATE USER tienda_mascotas1 
IDENTIFIED BY tienda1234 
DEFAULT TABLESPACE TIENDA_MASCOTAS 
QUOTA UNLIMITED ON TIENDA_MASCOTAS;


-- Asignar privilegios
GRANT CONNECT, RESOURCE TO tienda_mascotas1;
GRANT CREATE SESSION, CREATE TABLE, CREATE VIEW, CREATE SEQUENCE, 
      CREATE TRIGGER, CREATE PROCEDURE 
TO tienda_mascotas1;
GRANT ALTER ANY PROCEDURE TO tienda_mascotas1;
GRANT ALTER ANY TRIGGER TO tienda_mascotas1; 
GRANT DROP ANY VIEW TO tienda_mascotas1;
GRANT DROP ANY PROCEDURE TO tienda_mascotas1;
GRANT DROP ANY TRIGGER TO tienda_mascotas1; 


--Creaci�n de las tablas 
-- Crear tabla ESTADO
CREATE TABLE ESTADO (
    ID_ESTADO NUMBER(10) PRIMARY KEY,
    NOMBRE    VARCHAR2(255)
);

-- Crear secuencia para la tabla ESTADO
CREATE SEQUENCE seq_estado INCREMENT BY 1
                                START WITH 1
                                NOCYCLE
                                NOCACHE;

-- Crear trigger para la auto-incrementación de ID_ESTADO
CREATE OR REPLACE TRIGGER trg_estado_before_insert
BEFORE INSERT ON ESTADO
FOR EACH ROW
BEGIN
  :NEW.ID_ESTADO := seq_estado.NEXTVAL;
END;

-- Crear tabla PROVEEDORES
CREATE TABLE PROVEEDORES (
    ID_PROVEEDOR NUMBER(10) PRIMARY KEY,
    NOMBRE       VARCHAR2(255),
    TELEFONO     VARCHAR2(15),
    CORREO       VARCHAR2(255),
    ID_ESTADO    NUMBER(10),
    FOREIGN KEY (ID_ESTADO) REFERENCES ESTADO(ID_ESTADO) ON DELETE CASCADE
);

-- Crear secuencia para la tabla PROVEEDORES
CREATE SEQUENCE seq_proveedores INCREMENT BY 1
                                START WITH 1
                                NOCYCLE
                                NOCACHE;

-- Crear trigger para la auto-incrementación de ID_PROVEEDOR
CREATE OR REPLACE TRIGGER trg_proveedores_before_insert
BEFORE INSERT ON PROVEEDORES
FOR EACH ROW
BEGIN
  :NEW.ID_PROVEEDOR := seq_proveedores.NEXTVAL;
END;

CREATE OR REPLACE TRIGGER trg_proveedores_set_estado
BEFORE INSERT ON PROVEEDORES
FOR EACH ROW
BEGIN
  :NEW.ID_ESTADO := 1;
END;

-- Crear tabla ESPECIE
CREATE TABLE ESPECIE (
    ID_ESPECIE NUMBER(10) PRIMARY KEY,
    NOMBRE     VARCHAR2(255),
    ID_ESTADO  NUMBER(10),
    FOREIGN KEY (ID_ESTADO) REFERENCES ESTADO(ID_ESTADO) ON DELETE CASCADE
);

-- Crear secuencia para la tabla ESPECIE
CREATE SEQUENCE seq_especie INCREMENT BY 1
                                START WITH 1
                                NOCYCLE
                                NOCACHE;

-- Crear trigger para la auto-incrementación de ID_ESPECIE
CREATE OR REPLACE TRIGGER trg_especie_before_insert
BEFORE INSERT ON ESPECIE
FOR EACH ROW
BEGIN
  :NEW.ID_ESPECIE := seq_especie.NEXTVAL;
END;

CREATE OR REPLACE TRIGGER trg_especie_set_estado
BEFORE INSERT ON ESPECIE
FOR EACH ROW
BEGIN
  :NEW.ID_ESTADO := 1;
END;


-- Crear tabla USUARIOS
CREATE TABLE USUARIOS (
    ID_USUARIO  NUMBER(10) PRIMARY KEY,
    NOMBRE      VARCHAR2(255),
    APELLIDO    VARCHAR2(255),
    TELEFONO    VARCHAR2(15),
    CORREO      VARCHAR2(255),
    CONTRASENNA VARCHAR2(255),
    ID_ESTADO   NUMBER(10),
    FOREIGN KEY (ID_ESTADO) REFERENCES ESTADO(ID_ESTADO) ON DELETE CASCADE
);

-- Crear secuencia para la tabla USUARIOS
CREATE SEQUENCE seq_usuarios INCREMENT BY 1
                                START WITH 1
                                NOCYCLE
                                NOCACHE;

-- Crear trigger para la auto-incrementación de ID_USUARIO
CREATE OR REPLACE TRIGGER trg_usuarios_before_insert
BEFORE INSERT ON USUARIOS
FOR EACH ROW
BEGIN
  :NEW.ID_USUARIO := seq_usuarios.NEXTVAL;
END;

CREATE OR REPLACE TRIGGER trg_usuarios_set_estado
BEFORE INSERT ON USUARIOS
FOR EACH ROW
BEGIN
  :NEW.ID_ESTADO := 1;
END;


-- Crear tabla CATEGORIAS
CREATE TABLE CATEGORIAS (
    ID_CATEGORIA NUMBER(10) PRIMARY KEY,
    NOMBRE       VARCHAR2(255),
    ID_ESTADO    NUMBER(10),
    FOREIGN KEY (ID_ESTADO) REFERENCES ESTADO(ID_ESTADO) ON DELETE CASCADE
);

-- Crear secuencia para la tabla CATEGORIAS
CREATE SEQUENCE seq_categorias INCREMENT BY 1
                                START WITH 1
                                NOCYCLE
                                NOCACHE;

-- Crear trigger para la auto-incrementación de ID_CATEGORIA
CREATE OR REPLACE TRIGGER trg_categorias_before_insert
BEFORE INSERT ON CATEGORIAS
FOR EACH ROW
BEGIN
  :NEW.ID_CATEGORIA := seq_categorias.NEXTVAL;
END;

CREATE OR REPLACE TRIGGER trg_categorias_set_estado
BEFORE INSERT ON CATEGORIAS
FOR EACH ROW
BEGIN
  :NEW.ID_ESTADO := 1;
END;


-- Crear tabla PRODUCTOS
CREATE TABLE PRODUCTOS (
    ID_PRODUCTO  NUMBER(10) PRIMARY KEY,
    NOMBRE       VARCHAR2(255),
    DESCRIPCION  VARCHAR2(4000), 
    PRECIO       NUMBER(10, 2), 
    EXISTENCIAS  NUMBER(10),
    ID_CATEGORIA NUMBER(10),
    ID_ESPECIE   NUMBER(10),
    ID_PROVEEDOR NUMBER(10),
    ID_ESTADO    NUMBER(10),
    FOREIGN KEY (ID_ESTADO) REFERENCES ESTADO(ID_ESTADO) ON DELETE CASCADE,
    FOREIGN KEY (ID_CATEGORIA) REFERENCES CATEGORIAS(ID_CATEGORIA) ON DELETE CASCADE,
    FOREIGN KEY (ID_ESPECIE) REFERENCES ESPECIE(ID_ESPECIE) ON DELETE CASCADE,
    FOREIGN KEY (ID_PROVEEDOR) REFERENCES PROVEEDORES(ID_PROVEEDOR) ON DELETE CASCADE
);

-- Crear secuencia para la tabla PRODUCTOS
CREATE SEQUENCE seq_productos INCREMENT BY 1
                                START WITH 1
                                NOCYCLE
                                NOCACHE;

-- Crear trigger para la auto-incrementación de ID_PRODUCTO
CREATE OR REPLACE TRIGGER trg_productos_before_insert
BEFORE INSERT ON PRODUCTOS
FOR EACH ROW
BEGIN
  :NEW.ID_PRODUCTO := seq_productos.NEXTVAL;
END;

CREATE OR REPLACE TRIGGER trg_productos_set_estado
BEFORE INSERT ON PRODUCTOS
FOR EACH ROW
BEGIN
  :NEW.ID_ESTADO := 1;
END;


-- Crear tabla EMPLEADOS
CREATE TABLE EMPLEADOS (
    ID_EMPLEADO NUMBER(10) PRIMARY KEY,
    ID_USUARIO  NUMBER(10),
    CARGO       VARCHAR2(255),
    ID_ESTADO   NUMBER(10),
    FOREIGN KEY (ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO) ON DELETE CASCADE,
    FOREIGN KEY (ID_ESTADO) REFERENCES ESTADO(ID_ESTADO) ON DELETE CASCADE
);

-- Crear secuencia para la tabla EMPLEADOS
CREATE SEQUENCE seq_empleados INCREMENT BY 1
                                START WITH 1
                                NOCYCLE
                                NOCACHE;

-- Crear trigger para la auto-incrementación de ID_EMPLEADO
CREATE OR REPLACE TRIGGER trg_empleados_before_insert
BEFORE INSERT ON EMPLEADOS
FOR EACH ROW
BEGIN
  :NEW.ID_EMPLEADO := seq_empleados.NEXTVAL;
END;

CREATE OR REPLACE TRIGGER trg_empleados_set_estado
BEFORE INSERT ON EMPLEADOS
FOR EACH ROW
BEGIN
  :NEW.ID_ESTADO := 1;
END;

-- Crear tabla CLIENTES
CREATE TABLE CLIENTES (
    ID_CLIENTE NUMBER(10) PRIMARY KEY,
    ID_USUARIO NUMBER(10),
    ID_ESTADO  NUMBER(10),
    DIRECCION  VARCHAR2(255), 
    FOREIGN KEY (ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO) ON DELETE CASCADE,
    FOREIGN KEY (ID_ESTADO) REFERENCES ESTADO(ID_ESTADO) ON DELETE CASCADE
);

-- Crear secuencia para la tabla CLIENTES
CREATE SEQUENCE seq_clientes INCREMENT BY 1
                                START WITH 1
                                NOCYCLE
                                NOCACHE;

-- Crear trigger para la auto-incrementación de ID_CLIENTE
CREATE OR REPLACE TRIGGER trg_clientes_before_insert
BEFORE INSERT ON CLIENTES
FOR EACH ROW
BEGIN
  :NEW.ID_CLIENTE := seq_clientes.NEXTVAL;
END;

CREATE OR REPLACE TRIGGER trg_clientes_set_estado
BEFORE INSERT ON CLIENTES
FOR EACH ROW
BEGIN
  :NEW.ID_ESTADO := 1;
END;

-- Crear tabla VENTAS
CREATE TABLE VENTAS (
    ID_VENTA    NUMBER(10) PRIMARY KEY,
    ID_CLIENTE  NUMBER(10),
    FECHA_VENTA DATE, 
    TOTAL       NUMBER(10, 2), 
    ID_ESTADO   NUMBER(10),
    FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTES(ID_CLIENTE) ON DELETE CASCADE,
    FOREIGN KEY (ID_ESTADO) REFERENCES ESTADO(ID_ESTADO) ON DELETE CASCADE
);

-- Crear secuencia para la tabla VENTAS
CREATE SEQUENCE seq_ventas INCREMENT BY 1
                                START WITH 1
                                NOCYCLE
                                NOCACHE;

-- Crear trigger para la auto-incrementación de ID_VENTA
CREATE OR REPLACE TRIGGER trg_ventas_before_insert
BEFORE INSERT ON VENTAS
FOR EACH ROW
BEGIN
  :NEW.ID_VENTA := seq_ventas.NEXTVAL;
END;

CREATE OR REPLACE TRIGGER trg_ventas_set_estado
BEFORE INSERT ON VENTAS
FOR EACH ROW
BEGIN
  :NEW.ID_ESTADO := 1;
END;

-- Crear tabla DETALLE_VENTA
CREATE TABLE DETALLE_VENTA (
    ID_DETALLE  NUMBER(10) PRIMARY KEY,
    ID_VENTA    NUMBER(10),
    ID_PRODUCTO NUMBER(10),
    CANTIDAD    NUMBER(10),
    SUBTOTAL    NUMBER(10, 2),
    ID_ESTADO   NUMBER(10),
    FOREIGN KEY (ID_VENTA) REFERENCES VENTAS(ID_VENTA) ON DELETE CASCADE,
    FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTOS(ID_PRODUCTO) ON DELETE CASCADE,
    FOREIGN KEY (ID_ESTADO) REFERENCES ESTADO(ID_ESTADO) ON DELETE CASCADE
);

-- Crear secuencia para la tabla DETALLE_VENTA
CREATE SEQUENCE seq_detalle_venta
                                INCREMENT BY 1
                                START WITH 1
                                NOCYCLE
                                NOCACHE;


-- Crear trigger para la auto-incrementación de ID_DETALLE
CREATE OR REPLACE TRIGGER trg_detalle_venta_before_insert
BEFORE INSERT ON DETALLE_VENTA
FOR EACH ROW
BEGIN
  :NEW.ID_DETALLE := seq_detalle_venta.NEXTVAL;
END;

CREATE OR REPLACE TRIGGER trg_detalle_venta_set_estado
BEFORE INSERT ON DETALLE_VENTA
FOR EACH ROW
BEGIN
  :NEW.ID_ESTADO := 1;
END;

--------------------------------------------------------------------------------------------------------------------------------------------------------------

-- Insersi�n de datos en las tablas
INSERT INTO ESTADO (NOMBRE) VALUES ('ACTIVO');
INSERT INTO ESTADO (NOMBRE) VALUES ('INACTIVO');
-- Insertar datos en la tabla PROVEEDORES
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CORREO) VALUES ('Proveedores S.A.', '123456789', 'proveedores@example.com');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CORREO) VALUES ('Distribuidora Norte', '987654321', 'distribuidora@example.com');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CORREO) VALUES ('Alimentos Frescos', '555555555', 'alimentos@example.com');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CORREO) VALUES ('Suministros Rápidos', '111111111', 'suministros@example.com');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CORREO) VALUES ('Global Proveedores', '999999999', 'global@example.com');


-- Insertar datos en la tabla ESPECIE
INSERT INTO ESPECIE (NOMBRE) VALUES ('Perro');
INSERT INTO ESPECIE (NOMBRE) VALUES ('Gato');
INSERT INTO ESPECIE (NOMBRE) VALUES ('Ave');
INSERT INTO ESPECIE (NOMBRE) VALUES ('Pez');
INSERT INTO ESPECIE (NOMBRE) VALUES ('Reptil');
INSERT INTO ESPECIE (NOMBRE) VALUES ('Roedores');
INSERT INTO ESPECIE (NOMBRE) VALUES ('Granja');


-- Insertar datos en la tabla USUARIOS
INSERT INTO USUARIOS (NOMBRE, APELLIDO, TELEFONO, CORREO) VALUES ('Carlos', 'Pérez', '111222333', 'carlosp@example.com');
INSERT INTO USUARIOS (NOMBRE, APELLIDO, TELEFONO, CORREO) VALUES ('Ana', 'Mora', '444555666', 'anam@example.com');
INSERT INTO USUARIOS (NOMBRE, APELLIDO, TELEFONO, CORREO) VALUES ('Carlos', 'López', '777888999', 'carlosl@example.com');
INSERT INTO USUARIOS (NOMBRE, APELLIDO, TELEFONO, CORREO) VALUES ('María', 'Martínez', '222333444', 'mariamar@example.com');
INSERT INTO USUARIOS (NOMBRE, APELLIDO, TELEFONO, CORREO) VALUES ('Luis', 'Solano', '555666777', 'luissolano@example.com');


-- Insertar datos en la tabla CATEGORIAS
INSERT INTO CATEGORIAS (NOMBRE) VALUES ('Alimentos');
INSERT INTO CATEGORIAS (NOMBRE) VALUES ('Juguetes');
INSERT INTO CATEGORIAS (NOMBRE) VALUES ('Accesorios');
INSERT INTO CATEGORIAS (NOMBRE) VALUES ('Medicamentos');
INSERT INTO CATEGORIAS (NOMBRE) VALUES ('Higiene');


-- Insertar datos en la tabla PRODUCTOS
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, EXISTENCIAS, ID_CATEGORIA, ID_ESPECIE, ID_PROVEEDOR) 
VALUES ('Comida para perro', 'Alimento balanceado para perros adultos', 25.99, 100, 1, 1, 1);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, EXISTENCIAS, ID_CATEGORIA, ID_ESPECIE, ID_PROVEEDOR) 
VALUES ('Comida para gato', 'Alimento balanceado para gatos adultos', 20.99, 80, 1, 2, 2);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, EXISTENCIAS, ID_CATEGORIA, ID_ESPECIE, ID_PROVEEDOR) 
VALUES ('Juguete para ave', 'Juguete de colores para aves', 5.99, 150, 2, 3, 3);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, EXISTENCIAS, ID_CATEGORIA, ID_ESPECIE, ID_PROVEEDOR) 
VALUES ('Acuario pequeño', 'Acuario de 10 litros para peces pequeños', 35.99, 30, 3, 4, 4);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, EXISTENCIAS, ID_CATEGORIA, ID_ESPECIE, ID_PROVEEDOR) 
VALUES ('Vitamina para reptiles', 'Suplemento vitamínico para reptiles', 15.99, 50, 4, 5, 5);

-- Insertar datos en la tabla EMPLEADOS
INSERT INTO EMPLEADOS (ID_USUARIO, CARGO) VALUES (1, 'Gerente');
INSERT INTO EMPLEADOS (ID_USUARIO, CARGO) VALUES (2, 'Vendedor');


-- Insertar datos en la tabla CLIENTES
INSERT INTO CLIENTES (ID_USUARIO, DIRECCION) VALUES (3, '500mts sur del paseo metropoli');
INSERT INTO CLIENTES (ID_USUARIO, DIRECCION) VALUES (4, 'Un kilometro al este de Gasolinera Trova');
INSERT INTO CLIENTES (ID_USUARIO, DIRECCION) VALUES (5, 'Frente al parque central de tejar');

-- Insertar datos en la tabla VENTAS
INSERT INTO VENTAS (ID_CLIENTE, FECHA_VENTA, TOTAL) 
VALUES (1, TO_DATE('2024-10-01', 'YYYY-MM-DD'), 100.50);
INSERT INTO VENTAS (ID_CLIENTE, FECHA_VENTA, TOTAL) 
VALUES (2, TO_DATE('2024-10-02', 'YYYY-MM-DD'), 75.25);
INSERT INTO VENTAS (ID_CLIENTE, FECHA_VENTA, TOTAL) 
VALUES (3, TO_DATE('2024-10-03', 'YYYY-MM-DD'), 200.00);

-- Insertar datos en la tabla DETALLE_VENTA
INSERT INTO DETALLE_VENTA (ID_VENTA, ID_PRODUCTO, CANTIDAD, SUBTOTAL) 
VALUES (1, 1, 2, 51.98);
INSERT INTO DETALLE_VENTA (ID_VENTA, ID_PRODUCTO, CANTIDAD, SUBTOTAL) 
VALUES (1, 2, 1, 20.99);
INSERT INTO DETALLE_VENTA (ID_VENTA, ID_PRODUCTO, CANTIDAD, SUBTOTAL) 
VALUES (2, 3, 3, 17.97);
INSERT INTO DETALLE_VENTA (ID_VENTA, ID_PRODUCTO, CANTIDAD, SUBTOTAL) 
VALUES (3, 4, 1, 35.99);

--Creaci�n de los procedimientos almacenados 

--3 Procedimiento, 2 cursores por tabla
-- 1. Insertar Producto
CREATE OR REPLACE PROCEDURE SP_INSERTAR_PRODUCTO(
    P_NOMBRE IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2,
    P_PRECIO IN NUMBER,
    P_EXISTENCIAS IN NUMBER,
    P_CATEGORIA IN NUMBER,
    P_PROVEEDOR IN NUMBER
)
AS 
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM PRODUCTOS
    WHERE LOWER(NOMBRE) = LOWER(P_NOMBRE);

    IF V_COUNT > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Ya existe un producto similar con el mismo nombre, categoría y proveedor.');
    END IF;
    
    INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, EXISTENCIAS, ID_CATEGORIA, ID_PROVEEDOR)
    VALUES (P_NOMBRE, P_DESCRIPCION, P_PRECIO, P_EXISTENCIAS, P_CATEGORIA, P_PROVEEDOR);

    COMMIT;

EXCEPTION
    WHEN VALUE_ERROR THEN
        RAISE_APPLICATION_ERROR(-20002, 'Error en los datos proporcionados. Verifique los tipos de datos.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20003, 'Se ha producido un error inesperado: ' || SQLERRM);
END;

-- 2. Actualizar Producto
CREATE OR REPLACE PROCEDURE SP_ACTUALIZAR_PRODUCTO(
    P_ID_PRODUCTO IN NUMBER,
    P_NOMBRE IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2,
    P_PRECIO IN NUMBER,
    P_EXISTENCIAS IN NUMBER,
    P_CATEGORIA IN NUMBER,
    P_PROVEEDOR IN NUMBER
)
AS
BEGIN
    UPDATE PRODUCTOS
    SET NOMBRE = P_NOMBRE,
        DESCRIPCION = P_DESCRIPCION,
        PRECIO = P_PRECIO, 
        EXISTENCIAS = P_EXISTENCIAS,
        ID_CATEGORIA = P_CATEGORIA,
        ID_PROVEEDOR = P_PROVEEDOR
    WHERE ID_PRODUCTO = P_ID_PRODUCTO;
    COMMIT;
END;

-- 3. Eliminar Producto
CREATE OR REPLACE PROCEDURE SP_ELIMINAR_PRODUCTO(
    P_ID_PRODUCTO IN NUMBER
)
AS
BEGIN
    UPDATE PRODUCTOS
    SET ID_ESTADO = 2
    WHERE ID_PRODUCTO = P_ID_PRODUCTO;
    COMMIT;
END;

-- CURSORES
CREATE OR REPLACE PROCEDURE SP_OBTENER_PRODUCTOS_CS(P_CURSOR OUT SYS_REFCURSOR) AS
BEGIN
    OPEN P_CURSOR FOR
    SELECT P.NOMBRE, P.DESCRIPCION, P.PRECIO, P.EXISTENCIAS, C.ID_CATEGORIA, C.NOMBRE AS CATEGORIA, 
           PR.ID_PROVEEDOR, PR.NOMBRE AS PROVEEDOR, ES.ID_ESTADO, ES.NOMBRE AS ESTADO
    FROM PRODUCTOS P
    JOIN CATEGORIAS C ON P.ID_CATEGORIA = C.ID_CATEGORIA
    JOIN ESPECIE E ON P.ID_ESPECIE = E.ID_ESPECIE
    JOIN PROVEEDORES PR ON P.ID_PROVEEDOR = PR.ID_PROVEEDOR
    JOIN ESTADO ES ON P.ID_ESTADO = ES.ID_ESTADO;
END;

CREATE OR REPLACE PROCEDURE SP_OBTENER_PRODUCTO_CS(P_ID_PRODUCTO IN NUMBER,P_CURSOR OUT SYS_REFCURSOR) AS
BEGIN
    OPEN P_CURSOR FOR
    SELECT P.NOMBRE, P.DESCRIPCION, P.PRECIO, P.EXISTENCIAS, C.ID_CATEGORIA, C.NOMBRE AS CATEGORIA, 
           PR.ID_PROVEEDOR, PR.NOMBRE AS PROVEEDOR, ES.ID_ESTADO, ES.NOMBRE AS ESTADO
    FROM PRODUCTOS P
    JOIN CATEGORIAS C ON P.ID_CATEGORIA = C.ID_CATEGORIA
    JOIN ESPECIE E ON P.ID_ESPECIE = E.ID_ESPECIE
    JOIN PROVEEDORES PR ON P.ID_PROVEEDOR = PR.ID_PROVEEDOR
    JOIN ESTADO ES ON P.ID_ESTADO = ES.ID_ESTADO
    WHERE ID_PRODUCTO = P_ID_PRODUCTO;
END;

-- 1. Insertar USUARIO
CREATE OR REPLACE PROCEDURE SP_INSERTAR_USUARIO(
    P_NOMBRE IN VARCHAR2,
    P_APELLIDO IN VARCHAR2,
    P_TELEFONO IN VARCHAR2,
    P_CORREO IN VARCHAR2,
    P_CONTRASENNA IN VARCHAR2
)
AS 
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM USUARIOS
    WHERE CORREO = P_CORREO;

    IF V_COUNT > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Ya existe un usuario con el mismo correo.');
    END IF;

    INSERT INTO USUARIOS (NOMBRE, APELLIDO, TELEFONO, CORREO, CONTRASENNA)
    VALUES (P_NOMBRE, P_APELLIDO, P_TELEFONO, P_CORREO, P_CONTRASENNA);

    COMMIT;

EXCEPTION
    WHEN VALUE_ERROR THEN
        RAISE_APPLICATION_ERROR(-20002, 'Error en los datos proporcionados. Verifique los tipos de datos.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20003, 'Se ha producido un error inesperado: ' || SQLERRM);
END;


-- 2. Actualizar USUARIO
CREATE OR REPLACE PROCEDURE SP_ACTUALIZAR_USUARIO(
    P_ID_USUARIO IN NUMBER,
    P_NOMBRE IN VARCHAR2,
    P_APELLIDO IN VARCHAR2,
    P_TELEFONO IN VARCHAR2,
    P_CORREO IN VARCHAR2
)
AS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM USUARIOS
    WHERE ID_USUARIO = P_ID_USUARIO;

    IF V_COUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'El usuario con el ID proporcionado no existe.');
    END IF;

    UPDATE USUARIOS
    SET NOMBRE = P_NOMBRE,
        APELLIDO = P_APELLIDO,
        TELEFONO = P_TELEFONO, 
        CORREO = P_CORREO
    WHERE ID_USUARIO = P_ID_USUARIO;

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20002, 'Se ha producido un error inesperado: ' || SQLERRM);
END;

-- 3. Eliminar USUARIO
CREATE OR REPLACE PROCEDURE SP_ELIMINAR_USUARIO(
    P_ID_USUARIO IN NUMBER
)
AS
BEGIN
    UPDATE USUARIOS
    SET ID_ESTADO = CASE
                    WHEN ID_ESTADO = 1 THEN 2
                    WHEN ID_ESTADO = 2 THEN 1
                    ELSE ID_ESTADO
                END
    WHERE ID_USUARIO = P_ID_USUARIO;

    COMMIT;
END;

-- CURSORES
CREATE OR REPLACE PROCEDURE SP_OBTENER_USUARIOS_CS(P_CURSOR OUT SYS_REFCURSOR) AS
BEGIN
    OPEN P_CURSOR FOR
    SELECT U.ID_USUARIO, U.NOMBRE, U.APELLIDO, U.TELEFONO, U.CORREO, E.ID_ESTADO, E.NOMBRE AS ESTADO
    FROM USUARIOS U
    JOIN ESTADO E ON U.ID_ESTADO = E.ID_ESTADO;
END;


CREATE OR REPLACE PROCEDURE SP_OBTENER_USUARIO_CS(P_ID_USUARIO IN NUMBER,P_CURSOR OUT SYS_REFCURSOR) AS
BEGIN
    OPEN P_CURSOR FOR
    SELECT U.ID_USUARIO, U.NOMBRE, U.APELLIDO, U.TELEFONO, U.CORREO, E.ID_ESTADO, E.NOMBRE AS ESTADO
    FROM USUARIOS U
    JOIN ESTADO E ON U.ID_ESTADO = E.ID_ESTADO
    WHERE ID_USUARIO =P_ID_USUARIO;
END;

-- 1. Insertar CLIENTE
CREATE OR REPLACE PROCEDURE SP_INSERTAR_CLIENTES(
    P_ID_USUARIO IN NUMBER,
    P_DIRECCION IN VARCHAR2
)
AS 
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM CLIENTES
    WHERE ID_USUARIO = P_ID_USUARIO;

    IF V_COUNT > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Ya existe un cliente con el mismo id.');
    END IF;

    INSERT INTO CLIENTES (ID_USUARIO, DIRECCION)
    VALUES (P_ID_USUARIO, P_DIRECCION);

    COMMIT;

EXCEPTION
    WHEN VALUE_ERROR THEN
        RAISE_APPLICATION_ERROR(-20002, 'Error en los datos proporcionados. Verifique los tipos de datos.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20003, 'Se ha producido un error inesperado: ' || SQLERRM);
END;

-- 2. Actualizar CLIENTE
CREATE OR REPLACE PROCEDURE SP_ACTUALIZAR_CLIENTES(
    P_ID_CLIENTE IN NUMBER,
    P_ID_USUARIO IN NUMBER,
    P_DIRECCION IN VARCHAR2
)
AS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM CLIENTES
    WHERE ID_CLIENTE = P_ID_CLIENTE;

    IF V_COUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'El cliente con el ID proporcionado no existe.');
    END IF;

    UPDATE CLIENTES
    SET ID_USUARIO = P_ID_USUARIO,
        DIRECCION = P_DIRECCION
    WHERE ID_CLIENTE = P_ID_CLIENTE;

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20002, 'Se ha producido un error inesperado: ' || SQLERRM);
END;


-- 3. Eliminar CLIENTE
CREATE OR REPLACE PROCEDURE SP_ELIMINAR_CLIENTE(
    P_ID_CLIENTE IN NUMBER
)
AS
BEGIN
    UPDATE CLIENTES
    SET ID_ESTADO = CASE
                    WHEN ID_ESTADO = 1 THEN 2
                    WHEN ID_ESTADO = 2 THEN 1
                    ELSE ID_ESTADO
                END
    WHERE ID_CLIENTE = P_ID_CLIENTE;
    COMMIT;
END;

-- CURSORES
CREATE OR REPLACE PROCEDURE SP_OBTENER_CLIENTES_CS(P_CURSOR OUT SYS_REFCURSOR) AS
BEGIN
    OPEN P_CURSOR FOR
    SELECT C.ID_CLIENTE, U.ID_USUARIO, U.NOMBRE, U.APELLIDO, U.TELEFONO, U.CORREO,  E.ID_ESTADO, E.NOMBRE AS ESTADO, C.DIRECCION
    FROM CLIENTES C
    JOIN USUARIOS U ON U.ID_USUARIO = C.ID_USUARIO
    JOIN ESTADO E ON C.ID_ESTADO = E.ID_ESTADO;
END;


CREATE OR REPLACE PROCEDURE SP_OBTENER_CLIENTE_CS(P_ID_CLIENTE IN NUMBER, P_CURSOR OUT SYS_REFCURSOR) AS
BEGIN
    OPEN P_CURSOR FOR
    SELECT C.ID_CLIENTE, U.ID_USUARIO, U.NOMBRE, U.APELLIDO, U.TELEFONO, U.CORREO,  E.ID_ESTADO, E.NOMBRE AS ESTADO, C.DIRECCION
    FROM CLIENTES C
    JOIN USUARIOS U ON U.ID_USUARIO = C.ID_USUARIO
    JOIN ESTADO E ON C.ID_ESTADO = E.ID_ESTADO
    WHERE ID_CLIENTE = P_ID_CLIENTE;
END;

-- 1. Insertar EMPLEADOS
CREATE OR REPLACE PROCEDURE SP_INSERTAR_EMPLEADOS(
    P_ID_USUARIO IN NUMBER,
    P_CARGO IN VARCHAR2
)
AS 
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM EMPLEADOS
    WHERE ID_USUARIO = P_ID_USUARIO;

    IF V_COUNT > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Ya existe un empleado con el mismo id.');
    END IF;

    INSERT INTO EMPLEADOS (ID_USUARIO, CARGO)
    VALUES (P_ID_USUARIO, P_CARGO);

    COMMIT;

EXCEPTION
    WHEN VALUE_ERROR THEN
        RAISE_APPLICATION_ERROR(-20002, 'Error en los datos proporcionados. Verifique los tipos de datos.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20003, 'Se ha producido un error inesperado: ' || SQLERRM);
END;

-- 2. Actualizar EMPLEADOS
CREATE OR REPLACE PROCEDURE SP_ACTUALIZAR_EMPLEADOS(
    P_ID_EMPLEADO IN NUMBER,
    P_ID_USUARIO IN NUMBER,
    P_CARGO IN VARCHAR2
)
AS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM EMPLEADOS
    WHERE ID_EMPLEADO = P_ID_EMPLEADO;

    IF V_COUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'El empleado con el ID proporcionado no existe.');
    END IF;

    UPDATE EMPLEADOS
    SET ID_USUARIO = P_ID_USUARIO,
        CARGO = P_CARGO
    WHERE ID_EMPLEADO = P_ID_EMPLEADO;

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20002, 'Se ha producido un error inesperado: ' || SQLERRM);
END;


-- 3. Eliminar EMPLEADOS
CREATE OR REPLACE PROCEDURE SP_ELIMINAR_EMPLEADOS(
    P_ID_EMPLEADO IN NUMBER
)
AS
BEGIN
    UPDATE EMPLEADOS
    SET ID_ESTADO = CASE
                    WHEN ID_ESTADO = 1 THEN 2
                    WHEN ID_ESTADO = 2 THEN 1
                    ELSE ID_ESTADO
                END
    WHERE ID_EMPLEADO = P_ID_EMPLEADO;
    COMMIT;
END;

-- CURSORES
CREATE OR REPLACE PROCEDURE SP_OBTENER_EMPLEADOS_CS(P_CURSOR OUT SYS_REFCURSOR) AS
BEGIN
    OPEN P_CURSOR FOR
    SELECT C.ID_EMPLEADO, U.ID_USUARIO, U.NOMBRE, U.APELLIDO, U.TELEFONO, U.CORREO, E.ID_ESTADO, E.NOMBRE AS ESTADO, C.CARGO
    FROM EMPLEADOS C
    JOIN USUARIOS U ON U.ID_USUARIO = C.ID_USUARIO
    JOIN ESTADO E ON C.ID_ESTADO = E.ID_ESTADO;
END;

CREATE OR REPLACE PROCEDURE SP_OBTENER_EMPLEADO_CS(P_ID_EMPLEADO IN NUMBER, P_CURSOR OUT SYS_REFCURSOR) AS
BEGIN
    OPEN P_CURSOR FOR
    SELECT C.ID_EMPLEADO, U.ID_USUARIO, U.NOMBRE, U.APELLIDO, U.TELEFONO, U.CORREO,  E.ID_ESTADO, E.NOMBRE AS ESTADO, C.CARGO
    FROM EMPLEADOS C
    JOIN USUARIOS U ON U.ID_USUARIO = C.ID_USUARIO
    JOIN ESTADO E ON C.ID_ESTADO = E.ID_ESTADO
    WHERE ID_EMPLEADO = P_ID_EMPLEADO;
END;
--5 triggers(tabla auditoria, LO HACEMOS DE LAS MAS IMPORTANTES) EJEMPLO
CREATE TABLE PRODUCTOS_AUDITORIA (
    ID_AUDITORIA NUMBER PRIMARY KEY,
    ID_PRODUCTO NUMBER,
    NOMBRE VARCHAR2(255),
    OPERACION VARCHAR2(20),
    FECHA_MODIFICACION DATE,
    CONSTRAINT FK_PRODUCTO FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTOS(ID_PRODUCTO)
);

CREATE SEQUENCE SEQ_PRODUCTOS_AUDITORIA
START WITH 1
INCREMENT BY 1
NOCACHE;

CREATE OR REPLACE TRIGGER TR_AUDITORIA_PRODUCTOS
AFTER INSERT OR UPDATE ON PRODUCTOS
FOR EACH ROW
DECLARE
    V_OPERACION VARCHAR2(20);
BEGIN
    IF INSERTING THEN
        V_OPERACION := 'INSERT';
    ELSIF UPDATING THEN
        V_OPERACION := 'UPDATE';
    END IF;

    INSERT INTO PRODUCTOS_AUDITORIA (ID_AUDITORIA, ID_PRODUCTO, NOMBRE, OPERACION, FECHA_MODIFICACION)
    VALUES (SEQ_PRODUCTOS_AUDITORIA.NEXTVAL, :OLD.ID_PRODUCTO, :OLD.NOMBRE, V_OPERACION, SYSDATE);
END;

--10 vistas(DEPENDE DE LO QUE SE OCUPE)
--15 funciones(DEPENDE DE LO QUE SE OCUPE,NORMALEMTE PARA HACER COMPRAS Y ASI
--10 paquetes(UNO POR TABLA Y UNA PARA LAS AUDITORIAS)












